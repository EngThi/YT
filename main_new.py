"""
YouTube Automation - Main Entry Point
=====================================

Ponto de entrada principal usando arquitetura modular com Playwright.
Refatorado para m√°xima compatibilidade em containers e ambientes CI/CD.
"""

import asyncio
import os
import sys
from pathlib import Path

# Adiciona src ao path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.automation.youtube_automator import YouTubeAutomator
from src.utils.logger import AutomationLogger
from src.utils.config import ConfigManager


async def main():
    """Fun√ß√£o principal da automa√ß√£o"""
    
    # Configura√ß√£o inicial
    logger = AutomationLogger("main")
    config = ConfigManager()
    
    logger.info("ü§ñ Iniciando automa√ß√£o stealth do YouTube...")
    
    # Limpa screenshots antigos
    from src.utils.screenshot_manager import ScreenshotManager
    screenshot_manager = ScreenshotManager()
    await screenshot_manager.cleanup_old_screenshots()
    
    # Credenciais (em produ√ß√£o, usar vari√°veis de ambiente)
    email = os.getenv("GOOGLE_EMAIL", "seu_email@gmail.com")
    password = os.getenv("GOOGLE_PASSWORD", "sua_senha")
    
    if email == "seu_email@gmail.com" or password == "sua_senha":
        logger.warning("‚ö†Ô∏è Usando credenciais padr√£o. Configure GOOGLE_EMAIL e GOOGLE_PASSWORD")
    
    # Instancia automator
    automator = YouTubeAutomator("stealth_profile_v2")
    
    try:
        # Inicializa automator
        success = await automator.initialize()
        if not success:
            logger.error("‚ùå Falha na inicializa√ß√£o do automator")
            return False
        
        # Executa automa√ß√£o completa
        logger.info("üöÄ Executando automa√ß√£o completa...")
        success = await automator.execute_full_automation(email, password)
        
        if success:
            logger.info("üéâ Automa√ß√£o conclu√≠da com sucesso!")
            return True
        else:
            logger.error("‚ùå Automa√ß√£o falhou")
            return False
            
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Automa√ß√£o interrompida pelo usu√°rio")
        return False
    except Exception as e:
        logger.error(f"‚ùå Erro durante a execu√ß√£o: {e}")
        return False
    finally:
        logger.info("üîö Finalizando automa√ß√£o...")
        await automator.cleanup()
        logger.info("üßπ Limpeza final de screenshots...")
        await screenshot_manager.cleanup_old_screenshots()


if __name__ == "__main__":
    # Executa automa√ß√£o
    success = asyncio.run(main())
    
    # C√≥digo de sa√≠da
    exit_code = 0 if success else 1
    sys.exit(exit_code)